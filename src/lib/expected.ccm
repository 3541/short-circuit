/*
 * EXPECTED -- Extra utilities for std::expected.
 *
 * Copyright (c) 2023, Alex O'Brien <3541@3541.website>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of
 * the MPL was not distributed with this file, you can obtain one at http://mozilla.org/MPL/2.0/.
 */

module;

#include <expected>
#include <ostream>

export module sc.lib.expected;

import sc.lib.stream;

namespace sc::lib {

export template <typename T, Streamable E>
    requires Streamable<T> || std::same_as<T, void>
std::ostream& operator<<(std::ostream& stream, Stream<std::expected<T, E> const&> expected) {
    stream << "std::expected{";
    if (!expected.m_inner)
        stream << "std::unexpected{" << stream_view(expected.m_inner.error()) << '}';
    else if constexpr (!std::same_as<T, void>)
        stream << stream_view(*expected.m_inner);

    return stream << '}';
}

} // namespace sc::lib
