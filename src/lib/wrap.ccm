/*
 * WRAP -- Reference wrapper helper.
 *
 * Copyright (c) 2024, Alex O'Brien <3541@3541.website>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of
 * the MPL was not distributed with this file, you can obtain one at http://mozilla.org/MPL/2.0/.
 */

module;

#include <type_traits>

export module sc.lib.wrap;

namespace sc::lib {

export template <typename T>
using Wrap = std::conditional_t<std::is_lvalue_reference_v<T>,
                                std::reference_wrapper<std::remove_reference_t<T>>, T>;

template <typename T>
struct UnwrapImpl {
    using Type = T;
};

template <typename T>
struct UnwrapImpl<std::reference_wrapper<T>> {
    using Type = T&;
};

export template <typename T>
using Unwrap = UnwrapImpl<T>::Type;

} // namespace sc::lib
